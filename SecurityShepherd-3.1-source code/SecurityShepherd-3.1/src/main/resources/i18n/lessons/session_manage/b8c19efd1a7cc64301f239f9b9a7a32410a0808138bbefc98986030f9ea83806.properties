title.question.session_manage = What is Broken Authentication and Session Management?

paragraph.info.1 = Attacks against an application's <a>authentication</a> and <a>session management</a> can be performed using security risks that other vulnerabilities present. For example, any application's session management can be overcome when a <a>Cross Site Scripting</a> vulnerability is used to steal user session tokens. This topic is more about flaws that exist in the applications authentication and session management schema.
paragraph.info.2 = Broken authentication and session management flaws are commonly found in functionalities such as logout, password management, secret question and account update. An attack can potentially abuse these functions to modify other users credentials by guessing their secret question or through parameter abuse. Finding such flaws can sometimes be difficult, as each implementation is unique.
paragraph.info.3 = The following scenarios are vulnerable to these security risks;
paragraph.info.number.1 = 1)
paragraph.info.number.2 = 2)
paragraph.info.number.3 = 3)
paragraph.info.number.4 = 4)
paragraph.info.number.5 = 5)
paragraph.info.1.1 = User credentials are <a>stored</a> with insufficient <a>cryptographic</a> levels.
paragraph.info.2.2 = User credentials can be guessed or changed through poor <a>account management</a>.
paragraph.info.3.3 = Session identifiers are exposed in the URL.
paragraph.info.4.4 = The application does not use sufficient transport protection (Such as <a>HTTPs</a> or <a>sFTP</a>).
paragraph.info.5.5 = Session parameters can be manually changed by the user through application functionality.
paragraph.info.6 = Broken authentication and session management flaws allow an attacker to potentially compromise every account across an application. Once the attack has been performed, the attacker has the ability to do anything the user could do. For this reason, privileged accounts, such as administrators, are targeted.

button.hideIntro = Hide Lesson Introduction
button.showIntro = Show Lesson Introduction

challenge.description = This lesson implements bad session management. Investigate the following function to see if you trick the server into thinking you have already completed this lesson to retrieve the result key.
hint.title = Lesson Hint
lesson.hint.1 = This lesson stores unencrypted session information in a user's <a>cookies</a>
complete.button = Complete This Lesson
word.info.loading = Loading...
sign.hint = Would you link a hint?
generic.error = An Error Occurred: 
